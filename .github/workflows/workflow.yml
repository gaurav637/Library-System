name: "Library Management System"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options: 
          - staging
          - production
          
  push:
    branches: ["staging"]
    
  pull_request:
    branches: ["main"]  

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest   

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4  
        with:
          fetch-depth: 0

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20" 

      - name: Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.yarn
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Jest Test Cases
        run: yarn test --ci --coverage
      # - name: Lint Check
      #   run: yarn lint || echo "Lint warnings found"


  merge-to-main:
    needs: build   
    runs-on: ubuntu-latest
    if: success()

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          ref: staging

      - name: Merge Staging into Main
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin

          if ! git show-ref --quiet refs/remotes/origin/main; then
            git checkout -b main
            git push -u origin main
          else
            git checkout main
          fi

          git merge staging --no-ff -m "Auto-merged staging into main"
          git push origin main
